function init(self)
	self.scoring_for = "blue";
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function bounce(normal)
	local x = 0;
	local y = 0;
	
	if normal.x >= 1 then
		x = 500
	elseif normal.x < 0 then
		x = - 500
	end

	if normal.y >= 1 then
		y = 500
	elseif normal.y < 0 then
		y = - 500
	end
	
	msg.post("ball#collisionobject", "apply_force", {force = vmath.vector3(x, y, 0), position = go.get_world_position()})
end

function on_message(self, message_id, message, sender)
	if message.group == hash("blue") then		
		bounce(message.normal);
		msg.post("ball#sprite", "play_animation", {id = hash("ball_blue")});
		self.scoring_for = "blue";
		-- msg.post("ball#collisionobject", "apply_force", {force = vmath.vector3(500, 0, 0), position = go.get_world_position()})
		print("collided with the blue player");
	end
	if message.group == hash("pink") then
		bounce(message.normal);
		-- msg.post("ball#collisionobject", "apply_force", {force = vmath.vector3(0, 500, 0), position = go.get_world_position()})
		msg.post("ball#sprite", "play_animation", {id = hash("ball_pink")});
		self.scoring_for = "pink";
		print("collided with the pink player");
	end
	if message.group == hash("limits") then
		bounce(message.normal);
		--if message.normal.x == 1 then
		--	msg.post("ball#collisionobject", "apply_force", {force = vmath.vector3(500, 0, 0), position = go.get_world_position()})
		--elseif message.normal.x == -1 then
		--	msg.post("ball#collisionobject", "apply_force", {force = vmath.vector3(-500, 0, 0), position = go.get_world_position()})
		--end
	end
	if message.group == hash("score") then
		go.set_position(vmath.vector3(0, -20.0, 0))
		msg.post(self.scoring_for, "score_increment");
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
